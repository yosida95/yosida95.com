// Code generated by go-bindata.
// sources:
// templates/list.tmpl
// templates/view.tmpl
// DO NOT EDIT!

package handler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesListTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5f\x73\xe3\xb6\x11\x7f\xbf\x4f\xb1\x61\x92\xa3\x74\xa5\x48\xdb\x13\x4f\x1b\x89\x54\x7b\xe7\x73\xce\x99\xb4\xa7\x9b\xda\x79\xc8\x78\x3c\x1a\x98\x5c\x91\xf0\x81\x00\x0d\x80\x92\x35\xb2\xbe\x7b\x07\x20\x29\x53\x94\xe4\xaa\x9d\xdc\x8b\x45\x62\x77\x7f\xbb\xd8\xff\x74\xf8\xdd\xc7\xc9\xc5\xcd\x1f\x5f\x2e\x21\xd3\x39\x1b\xbf\x09\xcd\x0f\x30\xc2\xd3\xc8\x7d\x20\xee\xf8\x0d\x40\x98\x21\x49\xa0\x90\x38\xa3\x4f\x91\x23\xd2\x21\x64\x5a\x17\xc3\x20\x10\x69\xe1\xe7\x18\x70\xf5\xbd\x63\xf8\x00\xc2\x1c\x35\x81\x38\x23\x52\xa1\x8e\x9c\xdf\x6f\x7e\x19\xfc\x6d\x8b\xc4\x49\x8e\x91\x93\xa0\x8a\x25\x2d\x34\x15\xdc\x81\x58\x70\x8d\x5c\x47\xce\x97\x4c\x68\xa1\x1a\xf6\xef\x06\x03\xb8\xc9\x10\x26\x05\x72\xf8\x24\x49\x91\x41\x21\x85\x16\xb1\x60\x30\x18\xb4\x31\x0b\x29\x0a\x94\x7a\x69\x4d\xd3\x54\x33\xdc\x01\x85\xb7\x79\x42\x54\x36\x82\xce\xeb\x52\x28\x9a\x90\x9f\xcf\x9d\xc3\x78\xcb\xa2\x0d\x47\xa4\xa6\x31\xc3\xc3\xfc\xa5\x64\x2d\x76\xe3\x27\x35\x0c\x82\x46\x8f\x1f\x8b\x3c\x28\xac\x0d\x7f\x2f\x48\x8a\xd1\x6a\xe5\x7f\x21\x29\xae\xd7\x87\x11\x8f\x71\xd6\xae\x14\xcd\x49\x8a\xff\xcd\x92\xa9\xd2\x44\xd3\x38\xa0\xb1\xe0\xd3\xb3\x93\x93\xa7\xb3\x93\x13\xbf\xe0\xe9\x61\x58\x45\x35\x4e\x4d\x10\x5b\xd0\x5d\x27\xda\xc8\x2d\xa8\xd6\x28\xe1\x82\xc8\x44\x75\xe2\x55\xe5\x80\xae\x38\x86\x31\x91\x49\x0b\x4c\x95\x79\x4e\xe4\x72\x4f\xd2\x34\x02\xc6\x84\x96\xc0\x3f\x5a\xea\x2b\x19\x46\xf9\x57\x90\xc8\x22\x47\xe9\x25\x43\x95\x21\x6a\x07\x4c\x20\x23\x47\xe3\x93\x0e\x62\xa5\x1c\xc8\x24\xce\x22\x27\xd0\x19\xe6\x68\x4e\x02\xcb\xec\x5b\x5a\x8e\x09\x25\x91\xa3\x62\x89\xc8\x1b\x53\xfe\x4f\x58\x89\xaa\x10\x5c\xd1\xf9\x37\xc1\xd6\x94\x93\x3f\x1f\x37\x2e\x95\x16\xf9\x71\xb8\x99\x90\x3a\x2e\x35\x98\x1c\xda\x40\xcd\xc8\xdc\xbc\xfb\x34\x16\x9b\xb0\x54\x59\xdc\x56\xfe\x40\xe6\xa4\x3a\xad\x71\x01\x7a\xb3\x92\xc7\x26\xd5\x7b\xd4\x53\x9e\xf0\x52\x4f\x7a\xc4\xcb\xfb\x2b\x7a\xeb\x7e\x12\x22\x65\xf8\x9e\x13\xb6\xd4\x34\x56\x93\xfb\x07\x8c\xb5\x7b\x17\xc9\x11\xbd\x95\x77\x91\xf9\xf3\xfc\xbc\x91\xef\xaf\x1a\x48\x43\xf0\x1f\xa3\xea\xe7\xf9\xf9\xf6\xae\xef\x17\xa5\xca\x7a\x44\xa6\x65\x8e\x5c\xab\xfe\xda\xb3\x44\x16\x9d\xbe\xe3\xb8\x80\x8f\x44\x63\xaf\x3f\x22\x91\xf2\x63\x89\x44\xe3\x25\x43\xc3\xd8\x13\x7d\xaf\x06\xcd\x23\xe5\xa7\xa8\x6b\x82\xfa\xb0\xbc\x21\xe9\x67\x92\x63\x4f\xf4\x6f\x4f\xee\x46\xc4\x27\x6a\xc9\xe3\xe8\x74\x44\x7c\x25\xe3\x28\x1d\xe5\x7e\x41\x24\x72\xfd\x59\x24\xe8\x53\xae\x50\xea\x0f\x38\x13\x12\x7b\xe6\x7a\x35\xea\xba\xdf\x5b\x50\x9e\x88\x85\x97\x88\xd8\xda\xe6\xb9\x95\x83\x5c\xcf\x0d\x82\xc5\x62\xe1\xa7\xd6\x09\x03\xd2\x78\xc1\xd6\xf1\xcb\xdb\x83\x72\x3d\x37\x25\x6e\x7f\xf4\xa6\xc6\x4c\x49\xcf\xad\x6e\xe1\x7a\xe0\xfe\xfe\x7e\x70\x7a\xfe\xf3\xf9\x5f\x7f\x3a\x3f\x1b\x9c\x9a\x03\x52\x6a\x61\xb8\x5f\x98\x15\xf2\xc4\x50\x4c\x7f\x9a\x53\x5c\x34\xd4\x30\xa8\x4c\x19\x1f\x11\x4e\x30\x97\x6e\x32\xea\x41\x05\x75\xed\xfa\x0f\xca\x19\xbf\xe0\x54\x40\xb6\x63\x8f\x0f\x34\xe6\x30\xa8\xc8\x66\x0a\x05\x66\x0c\xd9\xa7\x7b\x91\x2c\x6b\x33\x12\x3a\x07\x9a\x44\xce\x42\x92\xa2\x40\xb9\x49\xa4\x0d\xc1\x08\xb5\xce\x6b\x4a\xcc\x88\x52\x91\x43\x39\xdf\xa2\x6d\x53\x99\x48\xc5\x16\x11\x20\x24\x4d\x8a\x3b\xe3\x50\x69\x29\x78\x3a\x7e\xb1\xb5\x3e\x08\x03\xb2\x05\x19\x24\x74\x7e\x48\x07\x27\xf3\xae\x8a\x92\x6d\x1f\xd8\x7a\x1b\x6f\x6b\x2e\x08\x1f\x5f\x89\x1c\xc3\xc0\x3e\x1a\x8d\x61\xc0\xe8\xeb\x82\x44\xc6\x19\x9d\xa3\xf2\xcd\x88\x6f\x50\x3e\x30\x91\xfe\x4f\x28\x45\x3d\x79\x2a\xf1\x2a\x6e\xaf\x02\x84\x81\xb9\xd1\xf6\x91\x42\x86\xb1\xb6\x01\xca\xc5\x3d\x65\x38\xd8\x75\x04\x40\x28\xec\xd8\x1b\x5f\x57\xdc\x26\x23\x87\x61\x50\x1f\xee\xe7\x85\x39\x61\x25\x5a\x2f\x5d\x4d\xfe\x75\x79\x2c\x77\xc7\x35\x1f\xfe\x39\xf9\x74\xac\x68\xe3\x8f\x2f\x57\x93\x9b\xc9\xf5\x7e\xa9\x30\xa8\x2e\xbc\x9b\x16\x76\x5a\xfa\x9c\xcc\x01\x79\xb2\x19\x94\xbb\x79\x12\x33\x24\xd2\x14\xcf\x56\x2e\xb5\x31\x6c\x2e\x77\x50\x5a\xf4\xef\xab\x42\xd8\x30\x74\xeb\x24\x27\x94\x1f\x5f\x25\x25\x6b\x88\x85\x90\x7a\x26\x18\x15\xa0\x33\x89\x38\x88\x05\x2b\x73\xae\x3a\xb1\x5c\xad\x40\x12\x9e\x22\xfc\x40\x79\x82\x4f\x1e\xfc\x60\xdd\x06\xc3\x08\xfc\xba\xf4\xd7\xeb\x37\xdd\xa4\xeb\x7a\xbe\x6d\x93\xc6\x7c\x50\x2d\x39\x5d\xb6\x6d\xc6\x94\x30\x86\x72\x09\xd6\x81\x33\xfa\xe4\xc0\x2e\x7f\xbb\xae\xab\x70\x06\xab\x55\x6d\xa2\xff\x6b\x02\x9b\xf5\x6c\x47\x8c\xe6\x69\xdd\xeb\x76\xe4\x7e\xc3\xe5\x85\x14\x45\x81\x56\x1e\x08\xd3\x91\x73\x0c\x6a\xa7\x7b\xb4\x03\xd9\xf5\xc7\xde\xc3\xae\x93\xec\xb6\xb6\x07\xb1\x18\xbf\x58\x73\x61\x07\x44\xf2\x5e\xc3\x7a\x1d\x06\xc5\x11\x8a\x76\xcb\x7c\xb5\xb2\xb9\xb5\x15\xc6\x9d\xd2\x5f\xad\x82\x77\x07\x32\xbc\x20\x29\xe5\xc4\xae\xb9\x1d\xe0\x1f\x07\x40\x67\x10\x97\xd2\x0c\xd0\xa9\xe9\x02\x30\x86\x53\xf8\x71\xbd\xbf\x35\x9b\x5c\xc3\xc7\x12\x95\xf6\xa5\x28\x35\x4e\x0b\xa2\xb3\x9e\x6b\x6f\x3a\x65\x54\x69\xd7\x83\xe9\x63\x89\x72\x19\xf5\x7a\x76\xcc\xb9\xde\x36\xfa\x00\x4e\xfb\x1e\xf4\xfb\x36\x70\x4d\xa3\xc6\x05\xca\x41\x21\x94\x56\xce\xf8\x2d\x23\x8f\xa5\x18\xc1\x67\x73\xb8\x13\x30\x63\x30\xf2\x84\xce\xba\x26\xee\xbb\x49\x08\x8c\xa8\xfa\xf9\xdb\xdd\xe8\x2f\x7b\x6e\x24\x58\xf2\x72\xa3\x89\x79\x81\xb7\xd2\xde\xeb\xd8\x1b\xed\xe4\x45\xcd\x77\xcf\x44\xfc\x75\x9b\xf5\x5d\xd0\x4a\x8c\xdd\xb6\x75\xf9\xf9\xe3\x81\xb6\x65\xfa\x12\x5c\x1e\x68\x5a\x33\x21\xf4\xc1\xe1\x5e\x11\xa7\x2a\x27\x8c\x1d\x9c\xf1\xb1\x28\x96\x92\xa6\x99\x76\xc6\x17\xcd\x23\xbc\x35\xa7\x23\x38\x3b\x39\x3d\x87\xdf\x44\x86\x14\xfe\x98\x5c\x5f\xfd\xfa\xf1\xbd\xff\xea\x2c\x57\x22\xa6\x84\x1d\xda\x18\x9a\x2f\xb0\x94\xea\xac\xbc\xb7\x7b\xdb\xcb\xa7\x4b\xab\x91\x54\x4b\x13\xcd\xd3\x86\x53\xcd\x53\x07\x16\x34\xd1\x59\xe4\x9c\xfd\x54\x77\x92\x4f\x54\x5f\x95\xf7\x4e\x77\xd7\xd8\xa3\xaf\xd9\xbd\x8e\x50\xd8\xb0\xee\xd5\x58\x7f\xd2\x1d\xa3\xd2\x2c\xaa\x33\x12\xe3\xbd\x10\x5f\x8f\xd1\xbb\xe1\xdd\xab\xb8\xa1\xbe\xa6\x39\x90\x4a\xf9\x4f\x76\xab\xd9\xa7\xc0\x50\xf7\x62\xff\xfb\xfa\x1a\x7e\x41\x4c\x76\xb0\xf7\x0e\xda\x3d\xe9\x59\x25\xd9\x26\x41\xbb\xe4\x7a\x2d\x6d\xd1\xc3\xa0\xda\x5e\xc3\xa0\xfa\x7f\x8b\xe9\x88\x30\xa7\xf9\x10\x14\x6a\x98\x51\x86\x76\xa5\x4e\x85\x21\xeb\xbc\x60\xc3\xaa\x76\xfe\x13\x00\x00\xff\xff\x73\x63\x8b\xa6\xa8\x11\x00\x00")

func templatesListTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesListTmpl,
		"templates/list.tmpl",
	)
}

func templatesListTmpl() (*asset, error) {
	bytes, err := templatesListTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/list.tmpl", size: 4520, mode: os.FileMode(416), modTime: time.Unix(1514746607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xff\x6f\xdb\xc6\x15\xff\x3d\x7f\xc5\x95\x05\x2a\x29\x90\x48\xdb\xa8\xb7\xd5\x26\x85\x3a\xb1\x13\x17\xdd\xe2\xa0\x76\x7f\x28\x82\xc0\x38\x91\x4f\xe4\xb9\xc7\x3b\xee\xee\x24\x59\x73\x0c\x98\x42\xbb\x6e\x4b\x81\x61\xc8\xb0\x61\x08\xb0\x01\xeb\x56\x17\x28\x90\x6e\xbf\xad\x01\xb6\xfe\x31\x8c\x17\xef\xbf\x18\x8e\x5f\x24\x8a\xa2\x1c\x37\xd8\x00\xc3\x22\xef\xbd\xf7\x79\x77\xef\x7d\xde\xbb\x27\xd9\x6f\x6c\xef\xdd\x3e\xf8\xe8\xfe\x0e\x0a\x54\x48\xbb\x37\x6c\xfd\x81\x28\x66\xbe\xd3\x38\xc2\x8d\xee\x0d\x84\xec\x00\xb0\x87\x22\x01\x7d\x72\xec\x18\xdc\xdf\x40\x81\x52\xd1\x86\x65\x71\x3f\x32\x43\xb0\x98\x7c\xd3\xd0\x7a\x08\xd9\x21\x28\x8c\xdc\x00\x0b\x09\xca\x31\x3e\x3c\xb8\xd3\xf9\xd1\x9c\x88\xe1\x10\x1c\xc3\x03\xe9\x0a\x12\x29\xc2\x99\x81\x5c\xce\x14\x30\xe5\x18\x27\x27\xc8\xdc\x9e\x49\xd0\xe9\x69\x61\xfa\x46\xa7\x83\x0e\x02\x40\x7b\x11\x30\x74\x57\xe0\x28\x40\x91\xe0\x8a\xbb\x9c\xa2\x4e\xa7\x8c\x1f\x09\x1e\x81\x50\xe3\x74\x9b\x8a\x28\x0a\x25\x07\xf7\x03\xae\xb8\x44\x6f\x85\x1e\x96\xc1\x26\xaa\xbc\x8e\xb9\x24\x1e\x7e\x67\xdd\x58\x8e\x37\x8e\xca\x70\x58\x28\xe2\x52\x58\xae\x3f\x10\xb4\xa4\xae\x63\x26\x37\x2c\xab\xf0\x63\xba\x3c\xb4\xa2\x74\x0f\xd6\xc9\x89\x99\xee\xc6\x7c\xcf\x9b\x9d\x7a\x11\xf0\xfb\xc6\x6d\x11\x81\x84\xd8\x87\x57\x6d\xea\x50\x2a\xac\x88\x6b\x11\x97\xb3\xc3\xb5\x95\x95\xe3\xb5\x95\x15\x33\x62\xfe\x72\x58\x49\x14\x1c\xea\xdc\x96\xa0\xab\xf1\x4c\x93\x38\x22\x4a\x81\x40\xb7\xb1\xf0\x64\x25\x75\x19\x35\x54\xa6\xb1\xe1\x62\xe1\x95\xc0\xe4\x20\x0c\xb1\x18\xd7\x70\xa9\x30\xd0\x5b\x28\x19\xbc\x5b\x72\x9f\xd9\x50\xc2\x3e\x46\x02\xa8\x63\x48\x35\xa6\x20\x03\x00\x65\x20\x9d\x53\xc7\x50\x70\xac\x2c\x57\x4a\x03\x05\x02\xfa\x8e\x61\xa9\x00\x42\xd0\x2b\x56\xaa\x6c\xa6\xb2\x10\x3c\x82\x1d\x43\xba\x02\x80\x15\x5b\x79\x4d\x58\x01\x32\xe2\x4c\x92\xe1\xff\x05\x5b\x11\x86\xff\xf7\xb8\xee\x40\x2a\x1e\x5e\x0f\x37\xe0\x42\xb9\x03\x85\x34\x87\xa6\x50\x7d\x3c\xd4\xef\x26\x71\xf9\x34\x2d\x19\x6f\xcb\xce\x8f\xf0\x10\x67\xab\x39\x2e\x42\xcd\xfe\x80\xb9\x9a\xdc\x4d\xd2\x96\x6d\xde\xf6\xdb\xa2\x8d\xdb\x61\xeb\x84\x3c\x68\xdc\xe5\xdc\xa7\xb0\xc5\x30\x1d\x2b\xe2\xca\xbd\xde\x11\xb8\xaa\xf1\xd0\x11\x9b\xe4\x81\x78\xe8\xe8\x7f\x8f\x1e\x4d\xed\x5b\x27\x05\xa4\x16\x98\x3f\x75\xb2\x8f\x47\x8f\x1e\x3c\x6c\x99\xd1\x40\x06\x4d\x2c\xfc\x41\x08\x4c\xc9\xd6\x69\x3b\x15\x52\x67\xf5\x26\x83\x11\xda\xc6\x0a\x9a\xad\x4d\xec\x48\xd3\x15\x80\x15\xec\x50\xd0\x8a\x4d\xde\x6a\xe7\xa0\xa1\x23\x4d\x1f\x54\x2e\x90\xb7\xc6\x07\xd8\xbf\x87\x43\x68\xf2\xd6\x83\x95\x87\x9b\xd8\xc4\x72\xcc\x5c\x67\x75\x13\x9b\x52\xb8\x8e\xbf\x19\x9a\x11\x16\xc0\xd4\x3d\xee\x81\x49\x98\x04\xa1\x6e\x41\x9f\x0b\x68\xea\xe3\xe5\xa8\xa7\xad\xe6\x88\x30\x8f\x8f\xda\x1e\x77\xd3\xbd\xb5\x1b\x59\x80\x1a\xed\x86\x65\x8d\x46\x23\xd3\x4f\x83\xd0\xc1\x45\x14\xd2\x3a\x9e\xbd\x1d\xc9\x46\xbb\xe1\xe3\x46\x6b\xf3\x46\x8e\xe9\xe3\x66\x23\x3b\x45\xa3\x8d\x1a\x1f\x6e\x75\x56\xd7\xdf\x59\xff\xe1\xdb\xeb\x6b\x9d\x55\xbd\x80\x07\x8a\x6b\xed\x99\xb2\x04\xe6\x69\x49\x84\x7d\x18\x12\x18\x15\x52\xdb\xca\xb6\xd2\xbd\x46\x3a\x91\x3e\x74\xc1\xa8\x23\x69\xe5\xb5\x6b\x1e\x49\xa3\x3b\xc3\xc9\x80\xd2\xe6\xdd\x5d\xec\x6d\xaf\x6a\xdf\xb6\x95\x59\xea\x7b\xcb\xd2\x17\x57\xfa\xd4\xe3\xde\x38\xdf\xa1\x47\x86\x88\x78\x8e\x31\x12\x38\x8a\x40\x4c\x39\x36\x15\x68\xa3\xd2\x7a\x2e\x71\x29\x96\xd2\x31\x08\x63\x73\xb2\x79\x29\xe5\x3e\x9f\x13\x22\x64\xe3\x82\xfd\x46\xd7\x96\x4a\x70\xe6\x77\x67\x7b\xcd\x17\x6c\x0b\xcf\x41\x5a\x1e\x19\x2e\xf3\xc1\xf0\xb0\xea\x62\x40\xe7\x17\xd2\x52\xec\xce\x7b\x8e\x30\xeb\xee\xf2\x10\x6c\x2b\x7d\xd4\x1e\x6d\x8b\x92\xab\x0d\xb1\x70\x03\x32\x04\x69\xea\xa1\xa0\x40\xb9\x45\xb9\xff\xbd\x50\xb2\x4b\xae\x30\xcf\xf2\x76\x25\x80\x6d\xe9\x13\xcd\x2f\x49\xa0\xe0\xaa\x34\x41\x21\xef\x11\x0a\x9d\xc5\x40\x20\x64\xf3\x94\x27\xdd\xfd\x4c\x5b\x93\x75\xc3\xb6\xf2\xc5\x7a\x5d\x34\xc4\x74\x00\x69\x94\x76\xf7\x7e\xb2\x73\x5d\xed\x4a\x68\x6e\xfd\x78\xef\xee\x75\x4d\x8b\x78\xdc\xdf\xdd\x3b\xd8\xdb\xaf\xb7\xb2\xad\xec\xc0\x8b\xb4\x48\x2f\x52\x93\xe1\x21\x02\xe6\x4d\xef\xd0\x45\x9e\xb8\x14\xb0\xd0\x75\x35\xc7\xa5\x32\x46\xca\xe5\x0a\x4a\x49\xfe\x66\x56\x08\x53\x85\x6a\x9d\x84\x98\xb0\xd7\xaa\x92\xfc\x92\xae\xb2\xb8\xa4\xe1\x63\x4a\x41\x8c\x51\x7a\x86\x3e\x39\x5e\xcc\x73\x85\x5c\x96\x6e\x14\xd9\x08\xf5\x3e\x8c\x67\x23\xd0\x9c\x0d\x09\xfd\xbc\x03\xd5\x19\x7d\x00\x92\xfc\x0c\x3c\x6d\x8b\x30\xcd\xe7\xaa\x62\x2a\xab\x43\xac\x14\x6d\x4d\xd9\x22\x64\x47\xc5\x91\x22\x2e\x55\x47\xcf\x2d\x0b\x38\x5a\x02\x1e\xe2\x0c\x15\xfd\x61\xe6\xf9\x76\xda\xa2\xbd\x2d\x85\x4e\x4f\xa7\xdd\xa2\xe2\x34\xaa\xba\x2c\xdb\xf3\x50\xdf\x17\xa9\x75\xb4\x8c\x4b\x79\x3e\xd0\xce\x95\x7c\x92\xc4\x83\x1e\x16\x57\x64\x2d\xd7\x38\x24\x0a\xc2\xc5\x68\x05\xeb\xa5\xbe\x17\xac\x2f\xc8\x0b\x5a\xe1\x81\x0a\xb8\xe8\xf4\x48\xb5\x93\xe6\xf1\x4c\x47\x96\xec\x6e\xe9\x60\x4a\x7c\xb6\x81\x5c\x60\x4a\xf3\xad\x94\xe1\xa5\x33\x2c\x1a\x11\x4f\x05\x8e\xb1\xfa\x83\x15\x5d\x1c\x51\x9d\x8f\xb9\xd6\x79\xf9\x9b\xdf\x5f\x9e\x7d\x9a\xc4\x5f\x27\xf1\x5f\x92\xf8\x93\x24\xfe\x12\x59\x68\xab\xc7\x07\xaa\x74\xe7\xe0\xa5\x50\x49\xfc\x24\xfd\x3b\xbf\xfc\xee\x6f\x49\xfc\x6d\x32\x79\x7c\xf1\xf3\x4f\x2f\x9e\x7d\x9b\xc4\xdf\xbc\x3c\x8f\x2f\xce\x1e\xbf\x78\xfe\x3c\x89\x9f\x5d\x7e\xf9\xf8\xf2\xfc\x8b\x24\xfe\xfa\xe2\x4f\xcf\x93\xf8\xaf\x49\xfc\xeb\x64\x32\x49\xe2\x67\x49\x7c\x9e\xc4\x93\x64\xf2\xab\xe4\x2c\x7e\x79\x1e\x27\xf1\xb3\xff\x3c\xfd\xec\xe5\x6f\xbf\xd2\x5b\x9a\x7c\x92\xae\x7c\xfe\xef\x5f\x9e\x5d\xfc\xfd\x8f\x49\xfc\x07\x0d\xfe\xf4\x8b\x17\xff\x7c\x92\xc4\x5f\x25\xf1\x37\x2f\xfe\x71\x76\xf1\x8b\xcf\xb4\xc9\xef\xfe\xfc\xe2\xbb\x49\x12\x7f\x9e\x43\xc5\xff\x4a\xe2\xa7\xc9\xe4\x49\x72\x36\xa9\xd9\x76\x0d\x8d\x8b\xa0\xe4\x89\xce\xef\xed\x4e\x9f\x53\xca\x47\x9d\xde\x40\x29\x3d\xe5\x79\x58\xe1\x8e\x0c\xf8\xa8\xe3\xf2\x81\x1e\xc2\xfb\x98\x4a\x28\xa6\xbf\xe2\xab\x46\x71\xe9\xeb\x09\x65\x36\xa4\xdf\x49\xa1\xd0\xbb\x57\x86\x74\xf1\x5e\x2c\xb1\x38\x67\xdf\x2b\x58\x7c\xdd\xae\xb8\x73\x6f\x7b\x49\x57\xd4\x6d\x6f\xea\xa4\xda\x13\xfb\x9c\xab\xa5\xb3\x43\x26\x3c\x94\x21\xa6\xf4\x8a\xe6\x18\x8d\x05\xf1\x03\x65\x74\x6f\x17\x8f\xe8\x2d\xbd\xba\x89\xd6\x56\x56\xd7\xd1\xfb\x3c\x00\x82\x3e\xda\xdb\xdf\x7d\x6f\x7b\xcb\xbc\x72\x54\x90\xdc\x25\x98\x2e\x1b\x48\x8a\x84\xf8\x44\x05\x83\x5e\x25\x1f\xa5\x52\xca\xc6\x35\x12\xfa\x85\xa6\x1c\xce\xca\x68\xed\xed\xbc\x5b\xde\x25\x6a\x77\xd0\x33\xaa\xa3\x4c\x8d\xbf\x7a\x02\xd4\x3a\x2c\x54\x6b\x3d\xe6\x5f\x26\xaf\xe3\x52\x8f\xc8\x7d\xec\x42\x8f\xf3\x8f\xaf\xe3\x77\xaa\x5b\xeb\xb8\x90\x5e\xe5\xd9\x12\x52\x9a\xc7\xe9\xd0\x54\xe7\x40\x4b\x6b\xb1\x3f\xd8\xdf\x47\x77\x00\xbc\x05\xec\x5a\xc6\xd6\xd0\x33\x23\xd9\x5c\x15\x94\xc5\xf9\xd4\x5b\x92\xdb\x56\x36\x1c\xdb\x56\xf6\x03\xd0\xc9\x89\x75\x13\x0d\x49\xb8\x81\x24\x28\xd4\x27\x14\xd2\x61\xde\xe7\x5a\xac\xc2\x88\x6e\xa0\x9b\xd6\xe9\xe9\x8d\xff\x06\x00\x00\xff\xff\x2c\x21\x8e\x20\x39\x12\x00\x00")

func templatesViewTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewTmpl,
		"templates/view.tmpl",
	)
}

func templatesViewTmpl() (*asset, error) {
	bytes, err := templatesViewTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/view.tmpl", size: 4665, mode: os.FileMode(420), modTime: time.Unix(1514747126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/list.tmpl": templatesListTmpl,
	"templates/view.tmpl": templatesViewTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"list.tmpl": &bintree{templatesListTmpl, map[string]*bintree{}},
		"view.tmpl": &bintree{templatesViewTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

