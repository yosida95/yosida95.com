// Code generated by go-bindata.
// sources:
// templates/list.tmpl
// templates/view.tmpl
// DO NOT EDIT!

package handler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesListTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x6d\x6f\xda\x4e\x12\x7f\x9f\x4f\x31\x75\xab\x00\x15\x78\x93\xa8\xd1\x5d\xc1\xe6\x2e\x4f\x4d\xaa\xde\x85\xe8\x92\xbe\xa8\xa2\x28\xda\xd8\x83\xbd\xe9\x7a\xd7\xdd\x5d\x20\x88\xf0\xdd\x4f\xeb\x07\x30\x06\x52\x7a\xba\xff\x9b\x60\xcf\xc3\x6f\x66\xe7\x61\x67\x1c\xef\xdd\xf9\xe0\xec\xee\xc7\xcd\x05\xc4\x26\xe1\xfd\x3d\xcf\xfe\x00\xa7\x22\xf2\x1b\xcf\xb4\xd1\xdf\x03\xf0\x62\xa4\x21\xa4\x0a\x87\xec\xc5\x77\x64\xd4\x85\xd8\x98\xb4\x4b\x88\x8c\x52\x37\x41\x22\xf4\x7b\xc7\xca\x01\x78\x09\x1a\x0a\x41\x4c\x95\x46\xe3\x3b\xdf\xef\xbe\x74\xfe\xbe\xc2\x12\x34\x41\xdf\x09\x51\x07\x8a\xa5\x86\x49\xe1\x40\x20\x85\x41\x61\x7c\xe7\x26\x96\x46\xea\x52\xfc\x5d\xa7\x03\x77\x31\xc2\x20\x45\x01\x97\x8a\xa6\x31\xa4\x4a\x1a\x19\x48\x0e\x9d\x4e\x15\x33\x55\x32\x45\x65\xa6\x99\x6b\x86\x19\x8e\x6b\xa0\xb0\x9f\x84\x54\xc7\x3d\xa8\xbd\x4e\xa5\x66\x21\xfd\x7c\xec\x6c\xc7\x9b\xa6\x55\x38\xaa\x0c\x0b\x38\x6e\x97\x1f\x29\x5e\x11\xb7\x71\xd2\x5d\x42\x4a\x3b\x6e\x20\x13\x92\x66\x3e\xfc\x23\xa5\x11\xfa\xb3\x99\x7b\x43\x23\x9c\xcf\xb7\x23\xee\x12\xac\x75\x2d\x96\xd0\x08\x7f\xe7\xc9\xa3\x36\xd4\xb0\x80\xb0\x40\x8a\xc7\xa3\x83\x83\x97\xa3\x83\x03\x37\x15\xd1\x76\x58\xcd\x0c\x3e\xda\x24\x56\xa0\xeb\x41\xcc\x32\x37\x61\xc6\xa0\x82\x33\xaa\x42\x5d\xcb\x57\x5e\x03\x26\x97\xe8\x06\x54\x85\x15\x30\x3d\x4a\x12\xaa\xa6\x1b\x8a\xa6\x54\xb0\x2e\x54\x14\xfe\x59\x31\x9f\xeb\x70\x26\x7e\x82\x42\xee\x3b\xda\x4c\x39\xea\x18\xd1\x38\x60\x13\xe9\x3b\x06\x5f\x0c\x09\xb4\x76\x20\x56\x38\xf4\x1d\x62\x62\x4c\xd0\x52\x48\x26\xec\x66\xbc\x04\x43\x46\x7d\x47\x07\x0a\x51\x94\xae\xfc\x8f\xb0\x0a\x75\x2a\x85\x66\xe3\xbf\x04\xdb\x30\x41\xff\xff\xb8\xc1\x48\x1b\x99\xec\x86\x1b\x4b\x65\x82\x91\x01\x5b\x43\x0b\xa8\x21\x1d\xdb\x77\x97\x05\x72\x91\x96\xbc\x8a\xab\xc6\x9f\xe9\x98\xe6\xd4\x02\x17\xa0\x39\x1c\x89\xc0\x96\x7a\x93\xb5\x75\x5b\xb6\xa3\xb6\x6a\xd3\x76\xd2\x9a\xb1\xfb\xc6\xa5\x94\x11\xc7\x13\x41\xf9\xd4\xb0\x40\x0f\x9e\x9e\x31\x30\x8d\x07\x5f\xf5\xd8\xbd\x7a\xf0\xed\x9f\xd7\xd7\x85\x7e\x6b\x56\x42\x5a\x86\xfb\xcb\xcf\x7f\x5e\x5f\xef\x1f\x5a\x6e\x3a\xd2\x71\x93\xaa\x68\x94\xa0\x30\xba\x35\x6f\x67\x4c\xee\x1f\x7e\x14\x38\x81\x73\x6a\xb0\xd9\xea\x51\x5f\xbb\x81\x42\x6a\xf0\x82\xa3\x15\x6c\xca\x56\xbb\x00\x4d\x7c\xed\x46\x68\x0a\x86\x3e\x9d\xde\xd1\xe8\x9a\x26\xd8\x94\xad\xfb\x83\x87\x1e\x75\xa9\x9e\x8a\xc0\x3f\xec\x51\x57\xab\xc0\x8f\x7a\x89\x9b\x52\x85\xc2\x5c\xcb\x10\x5d\x26\x34\x2a\x73\x8a\x43\xa9\xb0\x69\x8f\x57\xa0\xce\x5b\xcd\x09\x13\xa1\x9c\xb4\x43\x19\x64\xbe\xb5\x1b\x79\x80\x1a\xed\x06\x21\x93\xc9\xc4\x8d\xb2\x20\x74\x68\x19\x85\xac\x8f\x97\x6f\xcf\xba\xd1\x6e\x44\xb4\xd1\xea\xed\x15\x98\x11\x6d\x36\xf2\x53\x34\xda\xd0\xf8\x7e\xd2\x39\x3c\xfe\x7c\xfc\xb7\x4f\xc7\x47\x9d\x43\x4b\xa0\x23\x23\xad\xf4\x52\x58\xa3\x08\x2d\xc7\xde\x4f\x63\x86\x93\x92\xeb\x91\xdc\x95\xfe\x0e\xe9\x04\x7b\xe8\xb2\xa2\x9e\x35\x29\x7a\xd7\x7d\xd6\x4e\x7f\x89\x93\x03\x65\x37\x76\x7f\xcb\xc5\xec\x91\x9c\x6d\xa7\x10\xb1\x63\x28\x7b\x7a\x92\xe1\xb4\x70\x23\x64\x63\x60\xa1\xef\x4c\x14\x4d\x53\x54\x8b\x42\x5a\x30\xac\x52\x85\x5e\x70\x02\x4e\xb5\xf6\x1d\x26\xc4\x0a\x6f\x95\xcb\x65\x24\x57\x98\x00\x1e\x2d\x4b\xdc\xe9\x7b\xda\x28\x29\xa2\xfe\xd2\xd7\x82\xe0\x11\xba\x02\x49\x42\x36\xde\x66\x43\xd0\x71\xdd\xc4\x88\xaf\x12\xb2\x7e\xeb\xaf\x5a\x4e\xa9\xe8\x5f\xc9\x04\x3d\x92\x3d\x5a\x8b\x1e\xe1\xec\x6d\x45\xaa\x82\x98\x8d\x51\xbb\x76\xc4\x97\x28\xa7\x5c\x46\x7f\x84\x92\x16\x93\x27\x57\xcf\xf3\xf6\x26\x80\x47\xec\x89\x56\x49\x1a\x39\x06\x26\x4b\x50\x22\x9f\x18\xc7\xce\x7a\x20\x00\x3c\x99\x8d\xbd\xfe\x6d\x2e\x6d\x2b\xb2\xeb\x91\x82\xb8\x59\x16\xc6\x94\x8f\x30\x8b\xd2\xd5\xe0\xdf\x17\xbb\x4a\xd7\x42\x73\xfa\xaf\xc1\xe5\xae\xaa\x65\x3c\x6e\xae\x06\x77\x83\xdb\xcd\x5a\x1e\xc9\x0f\xbc\x5e\x16\xd9\xb4\x74\x05\x1d\x03\x8a\x70\x31\x28\xd7\xeb\x24\xe0\x48\x95\x6d\x9e\x95\x5a\xaa\x62\x64\xb5\x5c\x43\xa9\xf0\xdf\xe7\x8d\xb0\x10\xa8\xf7\x49\x42\x99\xd8\xbd\x4b\x46\xbc\x64\xa6\x52\x99\xa1\xe4\x4c\x82\x89\x15\x62\x27\x90\x7c\x94\x08\x5d\xcb\xe5\x6c\x06\x8a\x8a\x08\xe1\x03\x13\x21\xbe\xb4\xe1\x43\x16\x36\xe8\xfa\xe0\x16\xad\x3f\x9f\xef\xd5\x8b\xae\x1e\xf9\xaa\x4f\x06\x93\x4e\xbe\xe4\xd4\xc5\x56\x05\x23\xca\x39\xaa\x29\x64\x01\x1c\xb2\x17\x07\xd6\xe5\xab\x7d\x9d\xa7\x93\xcc\x66\x85\x8b\xee\xd7\x10\x16\xeb\xd9\x9a\x1a\x4b\xa2\xe2\xae\x5b\xd3\xfb\x86\xd3\x33\x25\xd3\x14\x33\x7d\xa0\xdc\xf8\xce\x2e\xa8\xb5\xdb\xa3\x9a\xc8\x7a\x3c\x36\x12\xeb\x41\xca\xb6\xb5\x0d\x88\x69\x7f\xe9\xcd\x59\x36\x20\xc2\x13\x03\xf3\xb9\x47\xd2\x1d\x0c\xad\xb7\xf9\x6c\x96\xd5\xd6\x4a\x1a\xd7\x5a\xbf\xea\x5d\x4a\x23\x26\x68\xb6\xd7\xae\x21\xb1\x21\x44\x06\xdc\x1b\x85\x63\xbb\x1f\xc3\xc1\x5a\x79\xd4\x12\xb6\x5c\xa7\x0b\x15\x1b\xf3\xc2\x90\xe4\x21\xaa\x4e\x2a\xb5\xd1\x4e\x7f\x9f\xd3\x5f\x23\xd9\x83\x81\x25\xae\xc5\x7a\xd3\x21\xaa\x0e\x5d\xe3\x8b\xf9\x33\x87\x2a\x3a\x15\x97\x04\x4e\x96\x2e\x5d\xdb\x17\xd8\x57\x99\x63\x3b\xb9\xf4\xdb\x6b\xe0\xe2\xfa\x7c\xcb\x35\x60\xfb\x1c\x2e\xb6\x5c\x02\x43\x29\xcd\xd6\x61\x99\x33\x1f\x75\x42\x39\xdf\x3a\x33\x03\x99\x4e\x15\x8b\x62\xe3\xf4\xcf\xca\x47\xd8\xb7\xd4\x1e\x1c\x1d\x1c\x1e\xc3\x37\x19\x23\x83\x1f\x83\xdb\xab\xaf\xe7\x27\xee\x9b\xb3\x51\xcb\x80\x51\xbe\x6d\x02\x97\x5f\x34\x11\x33\xf1\xe8\x29\xdb\x83\x96\x9f\x02\x95\xc6\xcc\x97\x10\x96\x44\xa5\xa4\x1e\x47\x0e\x4c\x58\x68\x62\xdf\x39\xfa\x54\x74\xe6\x25\x33\x57\xa3\x27\xa7\x3e\xbb\x37\xd8\x2b\x77\x99\x1d\x0c\x96\xa2\x1b\x2d\x16\x9f\x48\xbb\x98\xb4\x8b\xdf\x90\x06\xf8\x24\xe5\xcf\x5d\xec\x2e\x64\x37\x1a\x2e\xb9\x6f\x59\x26\x4a\x6b\xf7\x25\xdb\x12\x36\x19\xb0\xdc\x8d\xd8\xff\xb9\xbd\x85\x2f\x88\xe1\x1a\xf6\xc6\x8a\xdd\x50\x9e\x79\x91\x2d\x0a\xb4\xce\x2e\xd6\xbc\x0a\xdf\x23\xf9\x36\xe8\x91\xfc\xff\x17\xb3\x19\xf9\x08\x63\x96\x74\x41\xa3\x81\x21\xe3\x98\xad\xa8\x91\xb4\x6c\x93\xa4\xbc\x0b\x1f\xc9\x7c\xbe\xf7\xdf\x00\x00\x00\xff\xff\x01\x88\x4f\xd9\xf8\x10\x00\x00")

func templatesListTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesListTmpl,
		"templates/list.tmpl",
	)
}

func templatesListTmpl() (*asset, error) {
	bytes, err := templatesListTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/list.tmpl", size: 4344, mode: os.FileMode(416), modTime: time.Unix(1514749243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xff\x6f\xdb\xc6\x15\xff\x3d\x7f\xc5\x95\x05\x2a\x29\x90\x48\xdb\xa8\xb7\xd5\x26\x85\x3a\xb1\x13\x17\xdd\xe2\xa0\x76\x7f\x28\x82\xc0\x38\x91\x4f\xe4\xb9\xc7\x3b\xee\xee\x24\x59\x73\x0c\x98\x42\xbb\x6e\x4b\x81\x61\xc8\xb0\x61\x08\xb0\x01\xeb\x56\x17\x28\x90\x6e\xbf\xad\x01\xb6\xfe\x31\x8c\x17\xef\xbf\x18\x8e\x5f\x24\x8a\xa2\x1c\x37\xd8\x00\xc3\x22\xef\xbd\xf7\x79\x77\xef\x7d\xde\xbb\x27\xd9\x6f\x6c\xef\xdd\x3e\xf8\xe8\xfe\x0e\x0a\x54\x48\xbb\x37\x6c\xfd\x81\x28\x66\xbe\xd3\x38\xc2\x8d\xee\x0d\x84\xec\x00\xb0\x87\x22\x01\x7d\x72\xec\x18\xdc\xdf\x40\x81\x52\xd1\x86\x65\x71\x3f\x32\x43\xb0\x98\x7c\xd3\xd0\x7a\x08\xd9\x21\x28\x8c\xdc\x00\x0b\x09\xca\x31\x3e\x3c\xb8\xd3\xf9\xd1\x9c\x88\xe1\x10\x1c\xc3\x03\xe9\x0a\x12\x29\xc2\x99\x81\x5c\xce\x14\x30\xe5\x18\x27\x27\xc8\xdc\x9e\x49\xd0\xe9\x69\x61\xfa\x46\xa7\x83\x0e\x02\x40\x7b\x11\x30\x74\x57\xe0\x28\x40\x91\xe0\x8a\xbb\x9c\xa2\x4e\xa7\x8c\x1f\x09\x1e\x81\x50\xe3\x74\x9b\x8a\x28\x0a\x25\x07\xf7\x03\xae\xb8\x44\x6f\x85\x1e\x96\xc1\x26\xaa\xbc\x8e\xb9\x24\x1e\x7e\x67\xdd\x58\x8e\x37\x8e\xca\x70\x58\x28\xe2\x52\x58\xae\x3f\x10\xb4\xa4\xae\x63\x26\x37\x2c\xab\xf0\x63\xba\x3c\xb4\xa2\x74\x0f\xd6\xc9\x89\x99\xee\xc6\x7c\xcf\x9b\x9d\x7a\x11\xf0\xfb\xc6\x6d\x11\x81\x84\xd8\x87\x57\x6d\xea\x50\x2a\xac\x88\x6b\x11\x97\xb3\xc3\xb5\x95\x95\xe3\xb5\x95\x15\x33\x62\xfe\x72\x58\x49\x14\x1c\xea\xdc\x96\xa0\xab\xf1\x4c\x93\x38\x22\x4a\x81\x40\xb7\xb1\xf0\x64\x25\x75\x19\x35\x54\xa6\xb1\xe1\x62\xe1\x95\xc0\xe4\x20\x0c\xb1\x18\xd7\x70\xa9\x30\xd0\x5b\x28\x19\xbc\x5b\x72\x9f\xd9\x50\xc2\x3e\x46\x02\xa8\x63\x48\x35\xa6\x20\x03\x00\x65\x20\x9d\x53\xc7\x50\x70\xac\x2c\x57\x4a\x03\x05\x02\xfa\x8e\x61\xa9\x00\x42\xd0\x2b\x56\xaa\x6c\xa6\xb2\x10\x3c\x82\x1d\x43\xba\x02\x80\x15\x5b\x79\x4d\x58\x01\x32\xe2\x4c\x92\xe1\xff\x05\x5b\x11\x86\xff\xf7\xb8\xee\x40\x2a\x1e\x5e\x0f\x37\xe0\x42\xb9\x03\x85\x34\x87\xa6\x50\x7d\x3c\xd4\xef\x26\x71\xf9\x34\x2d\x19\x6f\xcb\xce\x8f\xf0\x10\x67\xab\x39\x2e\x42\xcd\xfe\x80\xb9\x9a\xdc\x4d\xd2\x96\x6d\xde\xf6\xdb\xa2\x8d\xdb\x61\xeb\x84\x3c\x68\xdc\xe5\xdc\xa7\xb0\xc5\x30\x1d\x2b\xe2\xca\xbd\xde\x11\xb8\xaa\xf1\xd0\x11\x9b\xe4\x81\x78\xe8\xe8\x7f\x8f\x1e\x4d\xed\x5b\x27\x05\xa4\x16\x98\x3f\x75\xb2\x8f\x47\x8f\x1e\x3c\x6c\x99\xd1\x40\x06\x4d\x2c\xfc\x41\x08\x4c\xc9\xd6\x69\x3b\x15\x52\x67\xf5\x26\x83\x11\xda\xc6\x0a\x9a\xad\x4d\xec\x48\xd3\x15\x80\x15\xec\x50\xd0\x8a\x4d\xde\x6a\xe7\xa0\xa1\x23\x4d\x1f\x54\x2e\x90\xb7\xc6\x07\xd8\xbf\x87\x43\x68\xf2\xd6\x83\x95\x87\x9b\xd8\xc4\x72\xcc\x5c\x67\x75\x13\x9b\x52\xb8\x8e\xbf\x19\x9a\x11\x16\xc0\xd4\x3d\xee\x81\x49\x98\x04\xa1\x6e\x41\x9f\x0b\x68\xea\xe3\xe5\xa8\xa7\xad\xe6\x88\x30\x8f\x8f\xda\x1e\x77\xd3\xbd\xb5\x1b\x59\x80\x1a\xed\x86\x65\x8d\x46\x23\xd3\x4f\x83\xd0\xc1\x45\x14\xd2\x3a\x9e\xbd\x1d\xc9\x46\xbb\xe1\xe3\x46\x6b\xf3\x46\x8e\xe9\xe3\x66\x23\x3b\x45\xa3\x8d\x1a\x1f\x6e\x75\x56\xd7\xdf\x59\xff\xe1\xdb\xeb\x6b\x9d\x55\xbd\x80\x07\x8a\x6b\xed\x99\xb2\x04\xe6\x69\x49\x84\x7d\x18\x12\x18\x15\x52\xdb\xca\xb6\xd2\xbd\x46\x3a\x91\x3e\x74\xc1\xa8\x23\x69\xe5\xb5\x6b\x1e\x49\xa3\x3b\xc3\xc9\x80\xd2\xe6\xdd\x5d\xec\x6d\xaf\x6a\xdf\xb6\x95\x59\xea\x7b\xcb\xd2\x17\x57\xfa\xd4\xe3\xde\x38\xdf\xa1\x47\x86\x88\x78\x8e\x31\x12\x38\x8a\x40\x4c\x39\x36\x15\x68\xa3\xd2\x7a\x2e\x71\x29\x96\xd2\x31\x08\x63\x73\xb2\x79\x29\xe5\x3e\x9f\x13\x22\x64\xe3\x82\xfd\x46\xd7\x96\x4a\x70\xe6\x77\x67\x7b\xcd\x17\x6c\x0b\xcf\x41\x5a\x1e\x19\x2e\xf3\xc1\xf0\xb0\xea\x62\x40\xe7\x17\xd2\x52\xec\xce\x7b\x8e\x30\xeb\xee\xf2\x10\x6c\x2b\x7d\xd4\x1e\x6d\x8b\x92\xab\x0d\xb1\x70\x03\x32\x04\x69\xea\xa1\xa0\x40\xb9\x45\xb9\xff\xbd\x50\xb2\x4b\xae\x30\xcf\xf2\x76\x25\x80\x6d\xe9\x13\xcd\x2f\x49\xa0\xe0\xaa\x34\x41\x21\xef\x11\x0a\x9d\xc5\x40\x20\x64\xf3\x94\x27\xdd\xfd\x4c\x5b\x93\x75\xc3\xb6\xf2\xc5\x7a\x5d\x34\xc4\x74\x00\x69\x94\x76\xf7\x7e\xb2\x73\x5d\xed\x4a\x68\x6e\xfd\x78\xef\xee\x75\x4d\x8b\x78\xdc\xdf\xdd\x3b\xd8\xdb\xaf\xb7\xb2\xad\xec\xc0\x8b\xb4\x48\x2f\x52\x93\xe1\x21\x02\xe6\x4d\xef\xd0\x45\x9e\xb8\x14\xb0\xd0\x75\x35\xc7\xa5\x32\x46\xca\xe5\x0a\x4a\x49\xfe\x66\x56\x08\x53\x85\x6a\x9d\x84\x98\xb0\xd7\xaa\x92\xfc\x92\xae\xb2\xb8\xa4\xe1\x63\x4a\x41\x8c\x51\x7a\x86\x3e\x39\x5e\xcc\x73\x85\x5c\x96\x6e\x14\xd9\x08\xf5\x3e\x8c\x67\x23\xd0\x9c\x0d\x09\xfd\xbc\x03\xd5\x19\x7d\x00\x92\xfc\x0c\x3c\x6d\x8b\x30\xcd\xe7\xaa\x62\x2a\xab\x43\xac\x14\x6d\x4d\xd9\x22\x64\x47\xc5\x91\x22\x2e\x55\x47\xcf\x2d\x0b\x38\x5a\x02\x1e\xe2\x0c\x15\xfd\x61\xe6\xf9\x76\xda\xa2\xbd\x2d\x85\x4e\x4f\xa7\xdd\xa2\xe2\x34\xaa\xba\x2c\xdb\xf3\x50\xdf\x17\xa9\x75\xb4\x8c\x4b\x79\x3e\xd0\xce\x95\x7c\x92\xc4\x83\x1e\x16\x57\x64\x2d\xd7\x38\x24\x0a\xc2\xc5\x68\x05\xeb\xa5\xbe\x17\xac\x2f\xc8\x0b\x5a\xe1\x81\x0a\xb8\xe8\xf4\x48\xb5\x93\xe6\xf1\x4c\x47\x96\xec\x6e\xe9\x60\x4a\x7c\xb6\x81\x5c\x60\x4a\xf3\xad\x94\xe1\xa5\x33\x2c\x1a\x11\x4f\x05\x8e\xb1\xfa\x83\x15\x5d\x1c\x51\x9d\x8f\xb9\xd6\x79\xf9\x9b\xdf\x5f\x9e\x7d\x9a\xc4\x5f\x27\xf1\x5f\x92\xf8\x93\x24\xfe\x12\x59\x68\xab\xc7\x07\xaa\x74\xe7\xe0\xa5\x50\x49\xfc\x24\xfd\x3b\xbf\xfc\xee\x6f\x49\xfc\x6d\x32\x79\x7c\xf1\xf3\x4f\x2f\x9e\x7d\x9b\xc4\xdf\xbc\x3c\x8f\x2f\xce\x1e\xbf\x78\xfe\x3c\x89\x9f\x5d\x7e\xf9\xf8\xf2\xfc\x8b\x24\xfe\xfa\xe2\x4f\xcf\x93\xf8\xaf\x49\xfc\xeb\x64\x32\x49\xe2\x67\x49\x7c\x9e\xc4\x93\x64\xf2\xab\xe4\x2c\x7e\x79\x1e\x27\xf1\xb3\xff\x3c\xfd\xec\xe5\x6f\xbf\xd2\x5b\x9a\x7c\x92\xae\x7c\xfe\xef\x5f\x9e\x5d\xfc\xfd\x8f\x49\xfc\x07\x0d\xfe\xf4\x8b\x17\xff\x7c\x92\xc4\x5f\x25\xf1\x37\x2f\xfe\x71\x76\xf1\x8b\xcf\xb4\xc9\xef\xfe\xfc\xe2\xbb\x49\x12\x7f\x9e\x43\xc5\xff\x4a\xe2\xa7\xc9\xe4\x49\x72\x36\xa9\xd9\x76\x0d\x8d\x8b\xa0\xe4\x89\xce\xef\xed\x4e\x9f\x53\xca\x47\x9d\xde\x40\x29\x3d\xe5\x79\x58\xe1\x8e\x0c\xf8\xa8\xe3\xf2\x81\x1e\xc2\xfb\x98\x4a\x28\xa6\xbf\xe2\xab\x46\x71\xe9\xeb\x09\x65\x36\xa4\xdf\x49\xa1\xd0\xbb\x57\x86\x74\xf1\x5e\x2c\xb1\x38\x67\xdf\x2b\x58\x7c\xdd\xae\xb8\x73\x6f\x7b\x49\x57\xd4\x6d\x6f\xea\xa4\xda\x13\xfb\x9c\xab\xa5\xb3\x43\x26\x3c\x94\x21\xa6\xf4\x8a\xe6\x18\x8d\x05\xf1\x03\x65\x74\x6f\x17\x8f\xe8\x2d\xbd\xba\x89\xd6\x56\x56\xd7\xd1\xfb\x3c\x00\x82\x3e\xda\xdb\xdf\x7d\x6f\x7b\xcb\xbc\x72\x54\x90\xdc\x25\x98\x2e\x1b\x48\x8a\x84\xf8\x44\x05\x83\x5e\x25\x1f\xa5\x52\xca\xc6\x35\x12\xfa\x85\xa6\x1c\xce\xca\x68\xed\xed\xbc\x5b\xde\x25\x6a\x77\xd0\x33\xaa\xa3\x4c\x8d\xbf\x7a\x02\xd4\x3a\x2c\x54\x6b\x3d\xe6\x5f\x26\xaf\xe3\x52\x8f\xc8\x7d\xec\x42\x8f\xf3\x8f\xaf\xe3\x77\xaa\x5b\xeb\xb8\x90\x5e\xe5\xd9\x12\x52\x9a\xc7\xe9\xd0\x54\xe7\x40\x4b\x6b\xb1\x3f\xd8\xdf\x47\x77\x00\xbc\x05\xec\x5a\xc6\xd6\xd0\x33\x23\xd9\x5c\x15\x94\xc5\xf9\xd4\x5b\x92\xdb\x56\x36\x1c\xdb\x56\xf6\x03\xd0\xc9\x89\x75\x13\x0d\x49\xb8\x81\x24\x28\xd4\x27\x14\xd2\x61\xde\xe7\x5a\xac\xc2\x88\x6e\xa0\x9b\xd6\xe9\xe9\x8d\xff\x06\x00\x00\xff\xff\x2c\x21\x8e\x20\x39\x12\x00\x00")

func templatesViewTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewTmpl,
		"templates/view.tmpl",
	)
}

func templatesViewTmpl() (*asset, error) {
	bytes, err := templatesViewTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/view.tmpl", size: 4665, mode: os.FileMode(420), modTime: time.Unix(1514747126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/list.tmpl": templatesListTmpl,
	"templates/view.tmpl": templatesViewTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"list.tmpl": &bintree{templatesListTmpl, map[string]*bintree{}},
		"view.tmpl": &bintree{templatesViewTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

